  - platform: moon
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_iso'
      - 'time_date'
      - 'time_utc'
      - 'beat'
  - platform: darksky
    api_key: !secret darksky_api
    forecast:
      - 0
    hourly_forecast:
      - 0
      - 1
      - 8
      - 12
    monitored_conditions:
      - summary
      - hourly_summary
      - daily_summary
      - icon
      - temperature
      - apparent_temperature
      - temperature_high
      - temperature_low
      - dew_point
      - cloud_cover
      - humidity
      - visibility
      - precip_type
      - precip_probability
      - precip_intensity
      - pressure
      - uv_index
  - platform: template
    sensors:
      dayoftheweek:
        value_template: >
          {{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()] }}
      bad_weather:
        value_template: >
          {% if is_state('sensor.dark_sky_precip' , 'snow') %} snow
          {% elif ((states('sensor.dark_sky_daily_low_temperature')|int < 4) and (states('sensor.dark_sky_dew_point')|int < 6)
            and (states('sensor.dark_sky_wind_speed')|int < 12) and (states('sensor.dark_sky_cloud_coverage')|int < 20)
            and (states('sensor.dark_sky_humidity')|int > 50)) %} frost
          {% elif (states('sensor.dark_sky_precip_intensity')|int > 7) %} heavy_rain
          {% else %} clear {% endif %}
      bad_weather_8:
        value_template: >
          {% if is_state('sensor.dark_sky_precip_8h' , 'snow') %} snow
          {% elif ((states('sensor.dark_sky_daily_low_temperature_8h')|int < 4) and (states('sensor.dark_sky_dew_point_8h')|int < 6)
            and (states('sensor.dark_sky_wind_speed_8h')|int < 12) and (states('sensor.dark_sky_cloud_coverage_8h')|int < 20)
            and (states('sensor.dark_sky_humidity_8h')|int > 50)) %} frost
          {% elif (states('sensor.dark_sky_precip_intensity~_8h')|int > 7) %} heavy_rain
          {% else %} clear {% endif %}
      cube_battery:
        entity_id:
          - binary_sensor.cube_158d000103a8a5
        friendly_name: 'Mi Cube'
        unit_of_measurement: "%"
        value_template: '{{ states.binary_sensor.cube_158d000103a8a5.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.cube_158d000103a8a5.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.cube_158d000103a8a5.attributes.voltage }}'
      button_switch_battery:
        entity_id:
          - binary_sensor.switch_158d00018721c6
        friendly_name: 'Button Switch'
        value_template: '{{ states.binary_sensor.switch_158d00018721c6.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.switch_158d00018721c6.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.switch_158d00018721c6.attributes.voltage}}'
        unit_of_measurement: "%"
      backdoor_battery:
        entity_id:
          - binary_sensor.door_window_sensor_158d0002b82d0a
        friendly_name: 'Back Door Sensor'
        value_template: '{{ states.binary_sensor.door_window_sensor_158d0002b82d0a.attributes.battery_level | int}}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.door_window_sensor_158d0002b82d0a.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.door_window_sensor_158d0002b82d0a.attributes.voltage}}'
        unit_of_measurement: "%"
      vibration_battery:
        entity_id:
          -  binary_sensor.vibration_158d00031ce0c7
        friendly_name: ' binary_sensor.vibration_158d00031ce0c7ibration Sensor'
        value_template: '{{ states. binary_sensor.vibration_158d00031ce0c7.attributes.battery_level | int}}'
        icon_template: >-
          {% set battery_level = states. binary_sensor.vibration_158d00031ce0c7.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states. binary_sensor.vibration_158d00031ce0c7.attributes.voltage}}'
        unit_of_measurement: "%"
      frontdoor_battery:
        entity_id:
          - binary_sensor.door_window_sensor_158d00019e1738
        friendly_name: 'Front Door Sensor'
        value_template: '{{ states.binary_sensor.door_window_sensor_158d00019e1738.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.door_window_sensor_158d00019e1738.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.door_window_sensor_158d00019e1738.attributes.voltage}}'
        unit_of_measurement: "%"
      hall_motion_battery:
        entity_id: 
          - binary_sensor.motion_sensor_158d0001655f53
        friendly_name: 'Hall Motion Sensor'
        value_template: '{{ states.binary_sensor.motion_sensor_158d0001655f53.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.motion_sensor_158d0001655f53.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.motion_sensor_158d0001655f53.attributes.voltage}}'
        unit_of_measurement: "%"
      hall_wireless_switch_battery:
        entity_id:
          - binary_sensor.wall_switch_both_158d00017110b8
        friendly_name: 'Hall Wireless Switch'
        value_template: '{{ states.binary_sensor.wall_switch_both_158d00017110b8.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.wall_switch_both_158d00017110b8.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.wall_switch_both_158d00017110b8.attributes.voltage}}'
        unit_of_measurement: "%"
      temperaure_sensor_battery:
        entity_id:
          - sensor.humidity_158d0001b9205b
        friendly_name: 'Temperature Sensor'
        value_template: '{{ states.sensor.humidity_158d0001b9205b.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.sensor.humidity_158d0001b9205b.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.sensor.humidity_158d0001b9205b.attributes.voltage}}'
        unit_of_measurement: "%"
      toilet_leak_sensor_battery:
        entity_id:
          - binary_sensor.water_leak_sensor_158d0001c3472b
        friendly_name: 'Hall Toilet Leak Sensor'
        value_template: '{{ states.binary_sensor.water_leak_sensor_158d0001c3472b.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.water_leak_sensor_158d0001c3472b.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.water_leak_sensor_158d0001c3472b.attributes.voltage}}'
        unit_of_measurement: "%"
      patio_door_battery:
        entity_id:
          - binary_sensor.door_window_sensor_158d00019e18bf
        friendly_name: 'Patio Door Sensor'
        value_template: '{{ states.binary_sensor.door_window_sensor_158d00019e18bf.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.door_window_sensor_158d00019e18bf.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.door_window_sensor_158d00019e18bf.attributes.voltage}}'
        unit_of_measurement: "%"
      utility_leak_sensor_battery:
        entity_id:
          - binary_sensor.water_leak_sensor_158d0001c347c9 
        friendly_name: 'Utility Leak Sensor'
        value_template: '{{ states.binary_sensor.water_leak_sensor_158d0001c347c9.attributes.battery_level | int }}'
        icon_template: >-
          {% set battery_level = states.binary_sensor.water_leak_sensor_158d0001c347c9.attributes.battery_level | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: '{{ states.binary_sensor.water_leak_sensor_158d0001c347c9.attributes.voltage}}'
        unit_of_measurement: "%"
      tradfri_dimmer_battery:
        entity_id:
          - sensor.tradfri_wireless_dimmer
        friendly_name: 'Tradfri Dimmer'
        value_template: '{{ states("sensor.tradfri_wireless_dimmer")  }}'
        icon_template: >-
          {% set battery_level = states("sensor.tradfri_wireless_dimmer") | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %} 
        attribute_templates:
          voltage: 'n/a'
        unit_of_measurement: "%"
      temperature_high_templated:
        entity_id:
          - sensor.dark_sky_daytime_high_temperature
        friendly_name: 'Temperature High'
        value_template: "{{ states('sensor.dark_sky_daytime_high_temperature') | round (1) }}"
        icon_template: mdi:thermometer
        unit_of_measurement: "%"
      temperature_low_templated:
        entity_id:
          - sensor.dark_sky_overnight_low_temperature
        value_template: "{{ states('sensor.dark_sky_overnight_low_temperature') | round (1) }}"
        icon_template: mdi:thermometer
        unit_of_measurement: "%"
      lrsync:
        friendly_name: 'Livingroom Light Sync'
        value_template: >-
          {% if is_state('light.lr1', 'unavailable') 
          and is_state('light.lr2', 'unavailable') 
          and is_state('light.lr3', 'unavailable') 
          and is_state('light.dr1', 'unavailable') 
          and is_state('light.dr2', 'unavailable') 
          and is_state('light.dr3', 'unavailable')  %}
            off
          {% elif not is_state('light.lr1', 'unavailable') 
          and not is_state('light.lr2', 'unavailable') 
          and not is_state('light.lr3', 'unavailable') 
          and not is_state('light.dr1', 'unavailable') 
          and not is_state('light.dr2', 'unavailable') 
          and not is_state('light.dr3', 'unavailable')  %}
            on
          {% else %}
            off
          {% endif %}
      vibration:
        friendly_name: 'Vibration last action'
        value_template: '{{ states.binary_sensor.vibration_158d00031ce0c7.attributes["last_action"] }}'
      last_alexa:
        entity_id:
        - media_player.lr_dot
        - media_player.k_dot
        - media_player.br_echo
        - media_player.fire_7
        value_template: >
          {{ states.media_player | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}
      harmony:
        entity_id:
          - remote.harmony_hub
        friendly_name: "Harmony"
        value_template: >-
          {% if states.remote.harmony_hub.attributes.current_activity == "PowerOff" %}
            Off
          {% elif states.remote.harmony_hub.attributes.current_activity == "Speaker" %}
            Speaker
          {% elif states.remote.harmony_hub.attributes.current_activity == "Sony" %}
            Sony
          {% elif states.remote.harmony_hub.attributes.current_activity == "Roku" %}
            Roku
          {% elif states.remote.harmony_hub.attributes.current_activity == "L Gee" %}
            LG
          {% elif states.remote.harmony_hub.attributes.current_activity == "TV" %}
            Gigablue
          {% elif states.remote.harmony_hub.attributes.current_activity == "Bluray" %}
            Bluray
          {% endif %}
      allhome:
        friendly_name: "All Home"
        value_template: >-
          {% if is_state('device_tracker.maddy_phone', 'home')
          and is_state('device_tracker.galaxy_a20e', 'home')
          and is_state('device_tracker.simon_phone', 'home') %}
            true
          {% else %}
            false
          {% endif %}
      zoe_clevel:
        friendly_name: "Zoe Battery"
        unit_of_measurement: '%'
        value_template: "{{states.sensor.zoe.attributes.charge_level}}"
        icon_template: >-
          {% set battery_level = states.sensor.zoe.attributes.charge_level  | int  %}
          {% set battery_round = (battery_level / 10) |int * 10 %}  
          {% if battery_level >= 100 %}
            mdi:battery
          {% elif battery_level > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %}
      zoe_range:
        friendly_name: "Zoe Range"
        unit_of_measurement: 'mi'
        value_template: "{{(states.sensor.zoe.attributes.remaining_range/1.609)|round(0)}}"
      zoe_plugged:
        friendly_name: "Zoe plugged in"
        value_template: "{{states.sensor.zoe.attributes.plugged|lower}}"
        icon_template: >-
          {% if is_state('sensor.zoe_plugged', 'false') %}
            mdi:power-plug-off
          {% else %}
            mdi:power-plug
          {% endif %}
      zoe_charge:
        friendly_name: "Zoe charging"
        value_template: "{{states.sensor.zoe.attributes.charging|lower}}"
      zoe_cpoint:
        friendly_name: "Zoe charging point"
        value_template: "{{states.sensor.zoe.attributes.charging_point|lower}}"
      zoe_rtime:
        friendly_name: "Zoe Remaining Time"
        unit_of_measurement: "mins"
        value_template: "{{states.sensor.zoe.attributes.remaining_time}}"
      zoe_update_time:
        friendly_name: "Zoe Last Update time"
        value_template: "{{(states.sensor.zoe.attributes.last_update/1000)|timestamp_custom('%H:%M:%S', true)}}"
  - platform: systemmonitor
    resources:
      - type: disk_free
        arg: /
      - type: disk_use_percent
        arg: /
      - type: memory_free
      - type: memory_use
      - type: swap_use
      - type: swap_free
      - type: processor_use
      - type: last_boot
  - platform: scrape
    resource: http://192.168.1.91/web/subservices
    name: TV Channel 
    select: 'e2servicename'
  - platform: scrape
    resource: http://192.168.1.91/web/getcurrent
    name: TV Program 
    select: 'e2eventtitle'
  - platform: scrape
    resource: http://192.168.1.91/web/powerstate
    name: Gigablue Power State
    select: 'e2instandby'
    value_template: '{{value.replace("true","off")|replace("false","on") }}'
  - platform: command_line
    name: zoe
    scan_interval: 1000
    command: !secret zoe_batt
    value_template: '{{ value_json.charge_level }}'
    json_attributes:
      - charging
      - plugged
      - charge_level
      - remaining_range
      - last_update
      - charging_point
      - remaining_time
  - platform: command_line
    name: zoe_schedule
    scan_interval: 1500
    command: 'sh /config/zoe_schedule.sh'
    value_template: "{{value_json.enabled}}"
  - platform: command_line
    name: zoe_Mon
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh mon'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Tue
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh tue'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Wed
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh wed'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Thu
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh thu'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Fri
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh fri'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Sat
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh sat'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_Sun
    scan_interval: 1500
    command: 'sh /config/zoe_cstate.sh sun'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration
  - platform: command_line
    name: zoe_today
    command: 'sh /config/zoe_cstate.sh now'
    value_template: '{{ value_json.day }}'
    json_attributes:
      - start
      - duration